package calhacks.hwio.extraction;
/**
 * CannyEdgeDetection
 *
 * A set of functions that takes an int[color][x][y] array representation of an image
 * and ultimately finds a map of the most significant regions.
 * 
 * @author Barak Zhou
 **/
public class CannyEdgeDetection {

    /**
     * float[][] getGradients(int[][][] input, int width, int height)
     * 
     * Returns a 2d-list of gradients with the following convolution:
     *
     * [0   , -1/2, 0  ]
     * [-1/2, 0   , 1/2]
     * [0   , 1/2 , 0  ]
     * Gradient = sum for all cells(sum for all colors (weight of cell * color))
     *
     * @param input The input array representation of an image.
     * @param width The width of the image.
     * @param height The height of the image.
     * @return float[][] gradients The array of gradients.
     **/
	
    public static float[][] getGradients(byte[][][] input, int width, int height) {
        float[][] gradients = new float[width][height];
        float[][] brightnessMap = new float[width][height];
        byte[] zero = {0, 0, 0};
        for (int i = 0; i < width; i++) {
        	for (int j = 0; j < height; j++) {
        		byte[] color = {input[0][i][j], input[1][i][j], input[2][i][j]};
        		brightnessMap[i][j] = ExtractBoxes.distanceBetween(color, zero);
        	}
        }
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
            	
                // north: -1/2
                if (j - 1 >= 0) {
                	/*
                    float r = (float) input[0][i][j - 1];
                    gradients[i][j] += -0.5 * r;
                    float g = (float) input[1][i][j - 1];
                    gradients[i][j] += -0.5 * g;
                    float b = (float) input[2][i][j - 1];
                    gradients[i][j] += -0.5 * b;
					*/
                	
                }
                
                // east: 1/2
                if (i + 1 < width) {
                    float r = (float) input[0][i + 1][j];
                    gradients[i][j] += 0.5 * r;
                    float g = (float) input[1][i + 1][j];
                    gradients[i][j] += 0.5 * g;
                    float b = (float) input[2][i + 1][j];
                    gradients[i][j] += 0.5 * b;
                }
                
                // south: 1/2
                if (j + 1 < height) {
                    float r = (float) input[0][i][j + 1];
                    gradients[i][j] += 0.5 * r;
                    float g = (float) input[1][i][j + 1];
                    gradients[i][j] += 0.5 * g;
                    float b = (float) input[2][i][j + 1];
                    gradients[i][j] += 0.5 * b;
                }
                
                // west: -1/2
                if (i - 1 >= 0) {
                    float r = (float) input[0][i - 1][j];
                    gradients[i][j] += -0.5 * r;
                    float g = (float) input[1][i - 1][j];
                    gradients[i][j] += -0.5 * g;
                    float b = (float) input[2][i - 1][j];
                    gradients[i][j] += -0.5 * b;
                }

            }
        }
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
            	System.out.println(gradients[i][j]);
            }	
        }
        
        return gradients;
    }


    /**
     * boolean[][] getInverseGradientMap(float[][] gradients, float threshold)
     * 
     * Returns an inverse map of the relevant cells determined by the threshold.
     * Relevance = gradient > threshold
     * @param gradients The array of gradients.
     * @param threshold The threshold of relevance. Below this threshold, the cell is not relevant.
     * @return boolean[][] map The map of the relevant gradients, inversed.
     **/
    public static boolean[][] getInverseGradientMap(float[][] gradients, float threshold) {
        boolean[][] map = new boolean[gradients.length][gradients[0].length]; // assume gradients.length > 0

        for (int i = 0; i < gradients.length; i++) {
            for (int j = 0; j < gradients[i].length; j++) {
                map[i][j] = !(Math.abs(gradients[i][j]) > threshold);
            }
        }

        return map;
    }


    
}
