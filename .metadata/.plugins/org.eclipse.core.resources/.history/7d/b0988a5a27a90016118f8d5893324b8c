package calhacks.hwio.extraction;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBufferByte;
import java.awt.image.Kernel;
import java.awt.image.RescaleOp;
import java.util.ArrayList;

public class ExtractBoxes {
	private static int[] convolveSize = {40, 40};
	private static final float GRADIENT = (float) 222.0;
	public static ArrayList<BufferedImage> extract(BufferedImage image){
		int convTotLength = convolveSize[0] * convolveSize[1];
		float[] convVals = new float[convTotLength];
		for (int i = 0; i < convTotLength; i++){
			convVals[i] = (float) (1.0 / convTotLength);
		}
		ConvolveOp conv = new ConvolveOp(new Kernel(convolveSize[0], convolveSize[1], convVals));
		BufferedImage convImage = conv.createCompatibleDestImage(image, null);
		convImage = conv.filter(image, convImage);
		for (int i = 0; i < 3; i++){
			RescaleOp rescale = new RescaleOp(1.5f, -105, null);
			convImage = rescale.filter(convImage, null);
		}
		
		ArrayList<BufferedImage> al = new ArrayList<BufferedImage>();
		al.add(convImage);
		
		return al;
	}
	
	public static float distanceBetween(byte[] src, byte[] tar) {
		float[] a2 = new float[3];
		for (int i = 0; i < 3; i++){a2[i] = (src[i] - tar[i]) * (src[i] - tar[i]);}
		return (float) Math.sqrt(a2[0] + a2[1] + a2[2]);
	}
	
	public static ArrayList<BufferedImage> findEdges(BufferedImage image) {
		int[] conSize = {3, 3};
		float[] convVals = {0f, -0.5f, 0f, -0.5f, 0, 0.5f, 0, 0.5f, 0};
		ConvolveOp conv = new ConvolveOp(new Kernel(conSize[0], conSize[1], convVals));
		BufferedImage convImage = conv.createCompatibleDestImage(image, null);
		convImage = conv.filter(image, convImage);
		
//		byte[][][] imgColors = new byte[3][convImage.getWidth()][convImage.getHeight()];
		boolean[][] edge = new boolean[convImage.getWidth()][convImage.getHeight()];
		
		for (int i = 0; i < convImage.getWidth(); i++) {
			for (int j = 0; j < convImage.getHeight(); j++) {
				Color color = new Color(convImage.getRGB(i, j));
				byte[] rgb = new byte[3];
				rgb[0] = (byte) color.getRed();
				rgb[1] = (byte) color.getBlue();
				rgb[2]  = (byte) color.getGreen();
				byte[] origin = {0, 0, 0};
				
				edge[i][j] = distanceBetween(origin, rgb) > GRADIENT;
			}
		}
		
		for (int i = 0; i < convImage.getWidth(); i++) {
			for (int j = 0; j < convImage.getHeight(); j++) {
				
			}
			
		}
		
		return null;
	}
}
